##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Environment Plan on Pull request
on:
  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - ".github/workflows/**"
      - "modules/**"
      - ".beacon"
      - ".destroy"

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: environment-awseb
  cancel-in-progress: false

jobs:
  # Plan Job:
  #   Just makes validations that the Terraform scripts are OK to continue
  plan:
    concurrency:
      group: deploy-promotion
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      # Automatic Labeling from .github/labeler.yml
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      # Source Checkout from PR Head
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      # Install yq tool
      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      # Install terraform tools
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Automatic environment checking from OWNERS file
      # usually this is not automatic for blue-green envs
      - name: Check if automatic
        id: check_automatic
        run: |
          is_auto=$(yq e '.automatic' OWNERS)
          if [[ "$is_auto" != "true" ]] ; then
            is_auto=false
          fi
          echo "autoapprove=$is_auto" >> $GITHUB_OUTPUT

      # Perform Terraform formatting check
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Perform Terraform Init in order to check if all modules are OK
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Create Plan Directory
        run: mkdir -p ./.plans

      # Run Terraform Plan to validate all changes
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out ./.plans/plan.out
        continue-on-error: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          name: environment-release-plan
          path: ./.plans/plan.out
          #if-no-files-found: error

      - uses: actions/github-script@v6
        #if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - uses: actions/github-script@v6
        if: ${{ steps.check_automatic.outputs.autoapprove == 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })
      
      - name: Read reviewers from file
        id: reviewers
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "as_json=$reviewers_as_json" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}')
            const reviewers_count=${{ steps.reviewers.outputs.count }}
            const actor = '${{ github.event.pull_request.user.login }}'
            
            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approval-required','review-required']
            });

      - name: Hard Fail plan not success
        run: |
          result_fmt="${{ steps.fmt.outcome }}"
          result_init="${{ steps.init.outcome }}"
          result_plan="${{ steps.plan.outcome }}"
          
          if [[ "$result_fmt" == "success" && "$result_init" == "success" && "$result_plan" == "success" ]] ; then
            echo "All OK... nothing todo"
          else
            echo "FMT=$result_fmt\nINIT=$result_init\nPLAN=$result_plan\nIt's NOT OK, will hard fail."
            exit 1
          fi